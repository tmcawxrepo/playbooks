---
- name: Evaluate website security
  hosts: all
  tasks:
    - name: Copy Python script to host
      copy:
        content: |
import ssl
import socket
import requests

def check_certificate(hostname):
    try:
        ctx = ssl.create_default_context()
        with ctx.wrap_socket(socket.socket(), server_hostname=hostname) as s:
            s.connect((hostname, 443))
            cert = s.getpeercert()
            return cert
    except Exception as e:
        return f"Error checking certificate: {e}"

def check_open_port(hostname, port):
    try:
        with socket.create_connection((hostname, port), timeout=5):
            return True
    except Exception:
        return False

def check_headers(url):
    try:
        response = requests.get(url)
        hsts = response.headers.get('Strict-Transport-Security', None)
        csp = response.headers.get('Content-Security-Policy', None)
        return {'HSTS': hsts is not None, 'CSP': csp is not None}
    except Exception as e:
        return f"Error checking headers: {e}"

def evaluate_website_security(hostname, url):
    certificate = check_certificate(hostname)
    port_443_open = check_open_port(hostname, 443)
    headers = check_headers(url)
    
    return {
        "Certificado": certificate,
        "Puerto": port_443_open,
        "Headers": headers,
    }

# Usage example:
hostname = "appscvgwsfcipred.claro.com.co/IdClaro-web/"
url = f"https://{hostname}"
security_report = evaluate_website_security(hostname, url)
print(security_report)  
        dest: /tmp/evaluate_security.py
        mode: '0755'

    - name: Execute Python script
      command: python3 /tmp/evaluate_security.py
      register: script_output

    - name: Fetch the HTML report
      fetch:
        src: /tmp/security_report.html
        dest: ./security_report.html
        flat: yes

    - name: Display message
      debug:
        msg: "Security report generated and fetched: security_report.html"